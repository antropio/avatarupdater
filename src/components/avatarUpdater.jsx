import { Fragment, useState } from "react";
import {
  PictureOutlined,
  MailOutlined,
  LockOutlined,
  UserOutlined,
  IdcardOutlined,
  CameraOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import { Form, Input, Button, Space, Upload, Avatar, Image } from "antd";
import ImgCrop from "antd-img-crop";
import { useIntl } from "react-intl";
import Camera from 'react-html5-camera-photo';
import 'react-html5-camera-photo/build/css/index.css';


/**
 * request to not show the error generated by the antd upload component when the upload is not performed from it
 */
const uploadImagedummyRequest = ({ file, onSuccess }) => {
  setTimeout(() => {
    onSuccess("done");
  }, 1000);
};

function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener("load", () => callback(reader.result));
  reader.readAsDataURL(img);
}

function HandleHookForm(c, p, m) {

}

const AvatarUpdater = () => {
  const intl = useIntl();
  const [takingPhoto, setTakingPhoto] = useState(false);
  const [imageAvatar, setImageAvatar] = useState(null);

  const handleTakePhotoAnimationDone = (dataUri) => {
    let pic = [
      {
        uid: '1',
        name: 'avatar.png',
        status: 'done',
        url: dataUri,
        thumbUrl: dataUri,
      },
    ];
    HandleHookForm(null, 'picture', pic);
    setImageAvatar(dataUri);
    setTakingPhoto(false);
  };

  return (
    <Fragment>
      <ImgCrop rotate shape="round">
        <Upload
          accept="image/png,image/jpeg"
          onChange={(info) => {
            if (info.fileList.length > 0) {
              getBase64(info.file.originFileObj, (imageUrl) =>
                setImageAvatar(imageUrl)
              );
              HandleHookForm(null, "picture", info.fileList);
            } else {
              HandleHookForm(null, "picture", null);
              setImageAvatar(null);
            }
          }}
          onRemove={() => {
            HandleHookForm(null, "picture", null);
          }}
          customRequest={uploadImagedummyRequest}
          multiple={false}
          listType="picture"
          maxCount={1}
        >
          {!takingPhoto && (
            <Space direction="vertical">
              <Button
                type="primary"
                shape="circle"
                style={{
                  height: !imageAvatar ? "120px" : "95px",
                  width: !imageAvatar ? "120px" : "95px",
                }}
              >
                {!imageAvatar && (
                  <PictureOutlined style={{ fontSize: "48px" }} />
                )}
                {imageAvatar && <Avatar src={imageAvatar} size={90} />}
              </Button>
              <>
                {intl.formatMessage({
                  id: "modal.label.photo",
                  defaultMessage: "Subir foto",
                })}
              </>
            </Space>
          )}
        </Upload>
      </ImgCrop>

      {/* EN desktop el upload no toma fotos toca hacerlo por separado*/}

      {takingPhoto && (
        <div className="avatarCamera">
          <Camera
            onTakePhotoAnimationDone={handleTakePhotoAnimationDone}
            isFullscreen={false}
          />
        </div>
      )}
      <Button
        type="primary"
        icon={takingPhoto ? <DeleteOutlined /> : <CameraOutlined />}
        onClick={() => {
          setImageAvatar(null);
          setTakingPhoto(!takingPhoto);
        }}
      />
    </Fragment>
  );
};

export default AvatarUpdater;
